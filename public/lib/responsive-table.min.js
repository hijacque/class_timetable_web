class ResponsiveTable{tableAlert;table;headers;body;constructor(t){this.table=t,this.body=`${t}>tbody`,$(t).addClass("table-hover"),this.headers=$(`${t}>thead>tr>[table-cts-column]:not([table-cts-column='edit'])`).get(),$(this.headers).attr("aria-sort","ascending").click((t=>this.sortTable(t.currentTarget)))}async initData(t=[]){$(this.body).empty(),this.data=t}sortTable(t){const e=$(`${this.table}>thead>tr> [table-cts-column='edit']`).text();if(e&&"Action"!=e)return;const a=$(t).attr("table-cts-column").split(" "),s=t.textContent,i=t.ariaSort.includes("asc")?1:t.ariaSort.includes("desc")?0:2;let o=$(t).index();if(o<0)return void this.showTableAlert(`Could not sort <b>${s}</b> column.`);const n=$(`${this.body} > tr > td:nth-child(${o+1})`).get();"number"===a[1]?n.sort(((t,e)=>{let a=t.textContent.includes(".")?parseFloat(t.textContent):parseInt(t.textContent)||0,s=e.textContent.includes(".")?parseFloat(e.textContent):parseInt(e.textContent)||0;return i>0?s-a:a-s})):n.sort(((t,e)=>{let a=t.textContent,s=e.textContent;return i>0?s.localeCompare(a):a.localeCompare(s)})),i>0?($(this.headers).attr("aria-sort","ascending"),t.ariaSort="descending"):$(this.headers).attr("aria-sort","ascending");for(let t=0;t<n.length;t++){let e=$(n[t]).closest("tr");$(this.body).prepend(e)}}showTableAlert(t){this.tableAlert?($("table-alert-title").html(t),this.tableAlert.show()):window.alert(t)}formatTime(t){let e=t.split(":"),a=e[0],s=e[1],i=e[2]||null;return a<=12?null!=i?`${a}:${s}:${i} AM`:`${a}:${s} AM`:null!=i?`${a-12}:${s}:${i} PM`:`${a-12}:${s} PM`}}class EditableTable extends ResponsiveTable{footer;editOptions;changeOptions;alwaysOnEdit;addBtn;// for adding new row
editBtn;// for opening edit view
saveBtn;// for closing edit view
editButtons;// edit individual row
deleteButtons;// delete individual row
confirmButtons;cancelButtons;constructor(t,e=[],a=!1){
/* create modal for alert message regarding responsive table actions */
$("body").prepend('<div class="modal fade" id="table-alert" tabindex="-1" aria-labelledby="table-alert-title" aria-hidden="true"><div class="modal-dialog"><div class="modal-content"><div class="modal-body" id="table-alert-title">meesage from responsive table</div><div class="modal-footer text-center"><button type="button" class="btn btn-secondary" data-mdb-dismiss="modal">ok</button></div></div></div></div>'),$(document).ready((()=>this.tableAlert=new mdb.Modal($("#table-alert")))),super(t);const s=$(`${t}>*>tr.add-data:not(.disabled)`).append('<td class="add-row text-primary"></td>');s.length>0&&(this.addBtn=$('<a role="button"><i class="fas fa-plus-circle fa-2x"></i></a>').appendTo(`${t}>*>tr.add-data:not(.disabled)>td.add-row`),this.addBtn.click((()=>{$(this.addBtn).data("newRow",this.addNewRow())})),this.initMenuInputs(s),this.footer=s);const i=$(`[data-cts-toggle='table'][data-cts-target='${t}']`),o=$(`[data-cts-dismiss='table'][data-cts-target='${t}']`);i.length>0&&o.length>0?($("[table-cts-column='edit']").hide(),$(s).hide(),this.editBtn=i.click((t=>this.openEditView(t.currentTarget))),this.saveBtn=o.click((t=>this.closeEditView(t.currentTarget))).hide()):(this.alwaysOnEdit=!0,this.openEditView()),this.editOptions=`${t}>tbody>tr>td.edit-action> div.edit-options`,this.changeOptions=`${t}>tbody>tr>td.edit-action> div.confirm-options`,this.editButtons=`${this.editOptions}>a.edit`,this.deleteButtons=`${this.editOptions}>a.delete`,this.confirmButtons=`${this.changeOptions}>a.confirm`,this.cancelButtons=`${this.changeOptions}>a.cancel`,this.initData(e,a)}async initData(t=[],e=!1,a=function(){}){if(e&&(t=await t),super.initData(t),0==t.length&&"Action"==$(`${this.table}>thead>tr> [table-cts-column='edit']`).text()&&this.alwaysOnEdit&&!this.footer){const t=this.alwaysOnEdit?this.headers.length+1:this.headers.length;$(this.body).append(`<tr><td colspan='${t}' class="text-muted no-data">No data to present</td></tr>`)}$(this.body).empty();const s=this.headers;for(const e of t){let t="<tr>";for(let a=0;a<s.length;a++){const i=$(s[a]).attr("table-cts-column").split(" "),o=e[i[0]];if("time"==i[1])t+=`<td>${this.formatTime(o)}</td>`;else if("link"==i[1]){t+=`<td><a href='${o}' class='text-decoration-underline'><i class="fas fa-arrow-up-right-from-square me-2"></i>${$(s[a]).attr("table-cts-column").split("'")[1]||s[a].textContent}</a></td>`}else t+=o?`<td>${o}</td>`:"<td></td>"}t+="<td class='edit-action'><div class='edit-options'><a class='edit' role='button'><i class='fas fa-edit fa-lg'></i></a><a class='delete' role='button'><i class='far fa-trash-alt fa-lg'></i></a></div><div class='confirm-options'><a class='confirm' role='button'><i class='fas fa-check-circle fa-lg'></i></a><a class='cancel' role='button'><i class='fas fa-times-circle fa-lg'></i></a></td></tr>",$(this.body).append(t)}this.alwaysOnEdit||(this.saveBtn.trigger("click"),$(this.table).find("[table-cts-column='edit'], td.edit-action").addClass("text-primary")),$(this.changeOptions).hide(),$(`${this.body}>tr`).on("row:edit",(t=>this.editRow(t.currentTarget))).on("row:delete",(t=>this.deleteRow(t.currentTarget))).on("row:confirm-change",(t=>this.confirmRowChange(t.currentTarget))).on("row:cancel-change",(t=>this.cancelRowChange(t.currentTarget))),$(this.editButtons).click((t=>$(t.currentTarget).closest("tr").trigger("row:edit"))),$(this.deleteButtons).click((t=>$(t.currentTarget).closest("tr").trigger("row:delete"))),$(this.confirmButtons).click((t=>$(t.currentTarget).closest("tr").trigger("row:confirm-change"))),$(this.cancelButtons).click((t=>$(t.currentTarget).closest("tr").trigger("row:cancel-change"))),a()}
// so convoluted but it just creates a new row which can be from the gui or console
addNewRow=t=>new Promise(((e,a)=>{let s=t;const i=$(this.footer).find(".add-td-input").get();if(s)for(let t=0;t<i.length;t++){let e=i[t].value||i[t].textContent;const o=$(this.headers[t]).attr("table-cts-column").split(" ");let n=this.headers[t].textContent;if(!$(i[t]).hasClass("optional")||""!=e&&n!=e){if(""==e)return this.showTableAlert(`You left <b>${n}</b> column blank.`),a(`input is required in ${n} column`);if(n==e)return this.showTableAlert(`Pick from the menu in <b>${n}</b> column.`),a(`choose an item from menu in ${n} column`);if($(i[t]).hasClass("unique")){const t=e.toLowerCase();for(let e=0;e<this.data.length;e++)if(this.data[e][o[0]].toLowerCase()==t)return this.showTableAlert(`New data must be unique, change <b>${n}</b> column`),a("new data must be unique")}else i[t].type&&"number"==i[t].type&&(e=e.includes(".")?parseFloat(e):parseInt(e))}else e=null;s[o[0]]=e}else{s={};for(let t=0;t<i.length;t++){let e=i[t].value||i[t].textContent;const o=$(this.headers[t]).attr("table-cts-column").split(" ");let n=i[t].title||i[t].textContent||this.headers[t].textContent;if(!$(i[t]).hasClass("optional")||""!=e&&n!=e){if(""==e)return this.showTableAlert(`You left <b>${n}</b> column blank.`),a(`input is required in ${n} column`);if(n==e)return this.showTableAlert(`Pick from the menu in <b>${n}</b> column.`),a(`choose an item from menu in ${n} column`);if($(i[t]).hasClass("unique")){const t=e.toLowerCase();for(let e=0;e<this.data.length;e++)if(this.data[e][o[0]].toLowerCase()==t)return this.showTableAlert(`New data must be unique, change <b>${n}</b> column`),a("new data must be unique")}else i[t].type&&"number"==i[t].type&&(e=e.includes(".")?parseFloat(e):parseInt(e))}else e=null;s[o[0]]=e}}this.data.push(s),e(s),$(i).not(".reuse").val(null).trigger("menu:reset");let o=$("<tr></tr>");for(let t=0;t<i.length;t++){const e=$(this.headers[t]).attr("table-cts-column").split(" ");if(!$(i[t]).hasClass("add-td-input")||$(i[t]).hasClass("optional")&&!s[e[0]])$(o).append("<td></td>");else if("link"==e[1]){const a=$(headers[t]).attr("table-cts-column").split("'")[1]||headers[t].textContent;$(o).append(`<td><a href='${s[e[0]]}' class='text-decoration-underline'><i class="fas fa-arrow-up-right-from-square me-2"></i>${a}</a></td>`)}else $(o).append(`<td>${s[e[0]]}</td>`)}const n=$("<td class='edit-action'><div class='edit-options'><a class='edit' role='button'><i class='fas fa-edit fa-lg'></i></a><a class='delete' role='button'><i class='far fa-trash-alt fa-lg'></i></a></div></td>").appendTo(o),d=$("<div class='confirm-options'><a class='confirm' role='button'><i class='fas fa-check-circle fa-lg'></i></a><a class='cancel' role='button'><i class='fas fa-times-circle fa-lg'></i></a></div>").hide().appendTo(n);$(o).find("div.confirm-options").hide(),$(this.body).append(o),$(o).on("row:edit",(t=>this.editRow(t.currentTarget))).on("row:delete",(t=>this.deleteRow(t.currentTarget))).on("row:confirm-change",(t=>this.confirmRowChange(t.currentTarget))).on("row:cancel-change",(t=>this.cancelRowChange(t.currentTarget))),$(o).find("a.edit").click((t=>$(t.currentTarget).closest("tr").trigger("row:edit"))),$(o).find("a.delete").click((t=>$(t.currentTarget).closest("tr").trigger("row:delete"))),$(d).find("a.confirm").click((t=>$(t.currentTarget).closest("tr").trigger("row:confirm-change"))),$(d).find("a.cancel").click((t=>$(t.currentTarget).closest("tr").trigger("row:cancel-change")))}));openEditView(t){this.alwaysOnEdit||($(this.footer).show(),$(t).prop("disabled",!0).hide(),this.saveBtn.prop("disabled",!1).show(),$(this.table).find("tr.add-data, td.edit-action, [table-cts-column='edit']").show(),this.data<1&&$(`${this.body}>tr:has(.no-data)`).hide())}closeEditView(t){const e=$(`${this.table}>thead>tr> [table-cts-column='edit']`);if("Action"!=e.text()&&($(`${this.body}>tr:not(.text-muted):first`).trigger("row:cancel-change"),e.text("Action")),this.alwaysOnEdit)return;const a=$(`${this.body}>tr:has(.no-data)`);a.length>0&&this.data.length<1?a.show():this.data.length<1?$(this.body).append(`<tr><td colspan='${this.headers.length}' class="text-muted no-data">No data to present</td></tr>`):a.length>0&&a.remove(),$(t).prop("disabled",!0).hide(),this.editBtn.prop("disabled",!1).show(),$(this.table).find("tr.add-data, td.edit-action, [table-cts-column='edit']").hide()}editRow(t){$(this.table).removeClass("table-hover"),$(this.editOptions).hide(),$(`${this.table}>thead>tr> [table-cts-column='edit']`).text("Edit"),$(`${this.body}>tr`).not(t).addClass("text-muted"),$(t).addClass("table-active").find("div.confirm-options").show(),$(this.footer).find("td.add-row>a").prop("disabled",!0).hide(),$(`${this.body}>tr>td>a`).hide();const e=$(t).find("td").get(),a=$(this.footer).find(".add-td-input").get(),s=this.headers;let i={};for(let t=0;t<s.length;t++){let a,o=$(s[t]).attr("table-cts-column").split(" ",3),n=e[t].textContent;if("link"!=o[1]&&o[1]){if("dropdown"==o[1]){const t=o[2].trim().split(/[\[,\]]/),e=t.filter((function(t){return""!=t&&"cancel"!=t.toLowerCase()}));console.log(e),a=`<div class='dropdown'><button class='btn btn-secondary dropdown-toggle td-input' type='button' data-mdb-toggle='dropdown' aria-expanded='false'>${n}</button><ul class='dropdown-menu'><li><a class="dropdown-item" role="button">${e.join('</a></li><li><a class="dropdown-item" role="button">')}</a></li>`+(t.some((t=>"cancel"==t.toLowerCase()))?"<li><hr class='dropdown-divider m-0'></li><li><a class='dropdown-item text-danger' role='button' data-cts-reset='dropdown'>Cancel</a></li>":"")}else a=`<input type='${o[1]}' class='form-control td-input' value='${n}'>`;$(e[t]).empty().append(a),i[o[0]]=n}}$(".td-input:first").focus(),$(a).prop("disabled",!0),$(t).data("edit-action",1),this.initMenuInputs($(t).data("prev-data",i))}deleteRow(t){$(this.table).removeClass("table-hover"),$(this.editOptions).hide(),$(`${this.table}>tbody>tr`).not(t).addClass("text-muted"),$(`${this.table}>thead>tr> [table-cts-column="edit"]`).text("Delete"),$(t).addClass("text-danger table-active").find("div.confirm-options").show(),$(this.footer).find("td.add-row>a").prop("disabled",!0).hide(),$(`${this.body}>tr>td>a`).hide(),$(t).data("edit-action",0),$(this.footer).find(".add-td-input").prop("disabled",!0)}confirmRowChange(t){const e=$(`${this.table}>thead>tr> [table-cts-column="edit"]`),a=$(t).data("edit-action");if($(`${this.body}>tr>td>a`).show(),$(this.table).addClass("table-hover"),1==a){const a=$(t).find(".td-input").get();let s={},i=!0;for(let t=0;t<a.length;t++){let e=$(a[t]).val()||$(a[t]).text();const o=this.headers[t].textContent,n=$(this.headers[t]).attr("table-cts-column").split(" ");if("link"!=n[1]){if(!$(this.headers[t]).hasClass("optional")||""!=e&&o!=e)if(""==e)this.showTableAlert(`You left <b>${o}</b> column blank.`),i=!1;else if(o==e)this.showTableAlert(`Pick from the menu in <b>${o}</b> column.`),i=!1;else if($(this.headers[t]).hasClass("unique")){const a=n[t];let s=!1;for(let t=0;t<this.data.length;t++)if(this.data[t][a].toLowerCase()===e.toLowerCase()){if(s){this.showTableAlert(`New data must be unique, change <b>${o}</b> column`),i=!1;break}s=!0}}else"number"==n[1]&&(e=e.includes(".")?parseFloat(e):parseInt(e));else e=null;s[n[0]]=e}}if(i){const i=$(t).index();Object.assign(this.data[i],s);for(let t=0;t<a.length;t++){const e=$(this.headers[t]).attr("table-cts-column").split(" ",3);let i=s[e[0]];"link"!=e[1]&&("time"==e[1]?$(a[t]).before(this.formatTime(i)):"dropdown"==e[1]||$(a[t]).hasClass("dropdown-toggle")?($(a[t]).parent("div").before(i),a[t]=$(a[t]).parent("div")):$(a[t]).before(i),$(a[t]).remove())}$(`${this.table}>tbody>tr`).not(t).removeClass("text-muted").css("background-color","unset"),$(this.table).find("div.edit-options").show(),$(this.footer).find(".add-td-input, td.add-row>a").prop("disabled",!1).show(),$(t).removeClass("table-active").removeData("prev-data").find("div.confirm-options").hide(),e.text("Action"),$(t).data("updatedData",...this.data.slice(i,1))}}else 0==a&&($(`${this.table}>tbody>tr`).not(t).removeClass("text-muted").css("background-color","unset"),$(this.table).find("div.edit-options").show(),$(this.footer).find(".add-td-input, td.add-row>a").prop("disabled",!1).show(),$(t).data("updatedData",...this.data.splice(rowIndex,1)).hide(),e.text("Action"))}cancelRowChange(t){const e=$(`${this.table}>thead>tr> [table-cts-column="edit"]`),a=$(t).data("edit-action");if($(`${this.body}>tr>td>a`).show(),$(this.table).addClass("table-hover"),1==a){let a=$(t).find(".td-input").get();const s=$(t).data("prev-data");for(let t=0;t<a.length;t++){let e=$("td:has(.td-input)").index();const i=s[$(this.headers[e]).attr("table-cts-column").split(" ")[0]];"time"==a[t].type?$(a[t]).before(this.formatTime(i)):$(a[t]).hasClass("dropdown-toggle")?(a[t]=$(a[t]).closest("div.dropdown"),$(a[t]).before(i)):$(a[t]).before(i),$(a[t]).remove()}$(`${this.body}>tr`).not(t).removeClass("text-muted"),$(t).removeClass("table-active").find("div.confirm-options").hide(),$(this.body).find("div.edit-options").show(),$(this.footer).find(".add-td-input, td.add-row>a").prop("disabled",!1).show(),e.text("Action"),$(t).removeData("prev-data")}else 0==a&&($(`${this.body}>tr`).not(t).removeClass("text-muted").css("background-color","unset"),$(this.table).find("div.edit-options").show(),$(this.footer).find(".add-td-input, td.add-row>a").prop("disabled",!1).show(),e.text("Action"),$(t).removeClass("text-danger table-active").find("div.confirm-options").hide())}initMenuInputs(t){
// initialize dropdown menu inputs to show value when clicked
let e=$(t).find("button.dropdown-toggle").get();for(const t of e){let e=$(t).next("ul.dropdown-menu"),a=$(e).find("a.dropdown-item").get();const s=t.textContent;$(t).on("menu:reset",(()=>t.textContent=s)),$(a).click((e=>{if("dropdown"==$(e.currentTarget).attr("data-cts-reset"))$(t).trigger("menu:reset");else{let a=$(e.currentTarget).text();$(t).val(a),$(t).text(a)}}))}}}class DisplayTable extends ResponsiveTable{constructor(t,e=[],a=!1){super(t),this.initData(e,a)}async initData(t=[],e=!1,a=function(){}){if(e&&(t=await t),super.initData(t),t.length>0){const e=this.headers;for(const a of t){let t="<tr>";for(let s=0;s<e.length;s++){const i=$(e[s]).attr("table-cts-column").split(" "),o=a[i[0]];"time"==i[1]?t+=`<td>${this.formatTime(o)}</td>`:t+=o?`<td>${o}</td>`:"<td></td>"}t+="</tr>",$(this.body).append(t)}}else $(`${this.body}:not(:has(.no-data))`).append(`<tr><td colspan='${this.headers.length}' class="text-muted no-data">No data to present</td></tr>`);a()}}