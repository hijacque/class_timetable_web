<div class="bg-light task-view" id="courses-view">
    <div class="side-panel">
        <div class="panel-header mx-4">
            <div class="d-flex justify-content-between">
                <h4>Courses</h4>
                <div>
                    <a type="button"><i class="fas fa-sort-alpha-up-alt"></i></a>
                    <a type="button"><i class="fas fa-search ms-2"></i></a>
                </div>
            </div>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="New Program Course" aria-describedby="add-course">
                <a type="button" class="input-group-text" id="add-course">
                    <i class="fas fa-plus text-primary"></i>
                </a>
            </div>
        </div>
        <hr>
        <div class="mx-3 panel-body">
            <% if (data.courses.length> 0) { %>
                <ul class="list-group panel-menu">
                    <% for (const course of data.courses) { %>
                        <button type="button" class="list-group-item list-group-item-action menu-item"
                            title="<%= course.title %>" id="<%= course.id %>">
                            <p class="text-truncate m-0">
                                <%= course.title %>
                            </p>
                        </button>
                        <% } %>
                </ul>
                <% } else { %>
                    <p class="text-muted text-center">No Courses</p>
                    <% } %>
        </div>
    </div>
    <div class="bg-white px-5 pt-4">
        <% if (data.courses.length> 0) { %>
            <div class="dropdown">
                <a class="btn btn-primary btn-lg btn-rounded btn-top dropdown-toggle" data-mdb-toggle="dropdown" title="Add semester" id="add-semester">
                    add semester
                </a>
                <ul class="dropdown-menu" aria-labelledby="add-semester">
                    <li><a class="dropdown-item" role="button" id="new-year">New Academic Year</a></li>
                    <li><a class="dropdown-item" role="button" id="new-summer">Summer Term</a></li>
                    <li><hr class="dropdown-divider" /></li>
                    <li><a class="dropdown-item text-danger" role="button">Cancel</a></li>
                </ul>
            </div>
            <h3 style="color: #8673b4;" id="curriculum-title">
                <%= data.courses[0]["title"] %> Curriculum
            </h3>
            <label for="curriculum-title">Total No. of Units: 0</label>
            <hr>
            <% } %>
    </div>
</div>
<% let subjects = JSON.stringify(data.subjects) %>
<script src="/lib/responsive-table.js"></script>
<script>
    const addCourse = (title) => new Promise((resolve, reject) => $.post(
        "/api/courses/", {name: title},
        (data) => resolve(data.courseID)
    ).fail((data) => reject(data)));

    const getCurriculum = (courseID) => new Promise((resolve, reject) => {
        $.get("/api/curriculums/" + courseID,
            (data, status) => { resolve(data) }, "json"
        ).fail((data) => console.log(data))
    });

    const addSemester = (courseID, semData) => $.post(
        "/api/curriculums/" + courseID, semData,
        (data, status) => console.log(data)
    ).fail((data) => console.log(data));

    const addSubject = (courseID, subjData) => new Promise((resolve, reject) => {
        $.post("/api/curriculum/" + courseID, subjData,
            (data) => resolve(data.newSubject)
        ).fail(data => reject(data))
    });

    function addTermTables(data = []) {
        const tableContent = 
            `<thead><th table-cts-column="code text" style="width: 150px;">COURSE CODE</th>` +
            `<th table-cts-column="title text">COURSE TITLE</th>` +
            `<th table-cts-column="units" style="width: 100px;">UNITS</th>` +
            `<td table-cts-column="edit">Action</td></thead>` +
            `<tbody></tbody>` +
            `<tfoot><tr class="add-data">` +
                `<td><input type="text" class="form-control add-td-input unique reuse"></td>` +
                `<td><input type="text" class="form-control add-td-input optional"></td>` +
                `<td><label class="add-td-input optional"></label></td>` +
            `</tr></tfoot>`;
        
        let view = $("#courses-view>div:last-child");
        for (let i = 0; i < data.length; i++) {
            const term = data[i];
            const newTable = `<div class="semester-header"><h6>${toOrdinal(term.year)} Year, ` +
                `${(term.term == "s") ? "Summer" : toOrdinal(term.term) + " Semester"}</h6><div>` +
                `<a class="btn btn-primary btn-floating" data-cts-toggle="table" ` +
                `data-cts-target="#${term.year}-${term.term}-term"><i class="fas fa-edit fa-lg me-2"></i></a>` +
                `<a class="btn btn-success btn-floating" data-cts-dismiss="table" ` +
                `data-cts-target="#${term.year}-${term.term}-term"><i class="fas fa-check-double fa-lg me-2"></i></a>` +
                `</div></div>` +
                `<table class="table table-bordered table-sm mb-5" id="${term.year}-${term.term}-term">${tableContent}</table>`;
            view.append(newTable);

            const newSemTable = new EditableTable(`#${term.year}-${term.term}-term`);
            newSemTable.initData(term.subjects, false, () => newSemTable.addBtn.click(async (event) => {
                const lastRow = $(`${newSemTable.body}>tr:last-child`);
                const newRow = await $(event.currentTarget).data("newRow");
                newRow.year = term.year;
                newRow.semester = term.term;
                    
                try {
                    const newSubject = await addSubject(openCourse.id, newRow);
                    const [code, title, units] = lastRow.children().get();
                    code.textContent = newSubject.code;
                    title.textContent = newSubject.title;
                    units.textContent = newSubject.units;
                } catch (error) {
                    lastRow.remove();
                    console.log(error);
                }
            }));
            semesterTables.push(newSemTable);
        }

        const totalTerms = data.length;
        if (totalTerms > 0) {
            latestYear = data[totalTerms-1].year;
            latestTerm = data[totalTerms-1].term;
        }
    }

    async function initCourseCurriculum(data = [], asyncData = false) {
        if (asyncData) {
            data = await data;
        }
        console.log(data);
        $("label[for='curriculum-title']").text("Total No. of Units: " + data.totalUnits || 0);
        addTermTables(data.curriculum);
        if (latestSem == "s") {
            $("li:has('#new-summer')").hide();
        }
    }

    function toOrdinal(number) {
        if (number == 1) {
            return number + "<sup>st</sup>";
        } else if (number == 2) {
            return number + "<sup>nd</sup>";
        } else if (number == 3) {
            return number + "<sup>rd</sup>";
        } else if (number > 3) {
            return number + "<sup>th</sup>";
        } else {
            return number;
        }
    }
    
    const totalTermsPerYear = <%- JSON.stringify(data.totalTerms || 0) %>;
    const semesterTables = [];
    const subjects = <%- JSON.stringify(data.subjects || []) %>;
    const courses = $(".panel-menu>button.menu-item");
    const courseTitle = $("#curriculum-title");
    let latestTerm, latestSem = 0, latestYear = 0;
    let openCourse;
    if (courses.length > 0) {
        openCourse = courses.get(0);
        $(openCourse).addClass("active");
        initCourseCurriculum(getCurriculum(openCourse.id), true);
        
        $("#new-year").click(() => {
            try {
                addSemester(openCourse.id, { forNewYear: true, latestYear: latestYear });
                latestYear++;
            } catch (error) {
                return console.log(error);
            }
            $("li:has(#new-summer)").show();
            let view = $("#courses-view>div:last-child").get(0);
            view.scrollTo(0, view.scrollHeight);
            let newTerms = [];
            for (let i = 1; i <= totalTermsPerYear; i++) {
                newTerms.push({ year: latestYear, term: i, subjects: [] });
            }
            addTermTables(newTerms);
        });
        $("#new-summer").click(() => {
            try {
                addSemester(openCourse.id, { forNewYear: false, latesYear: latestYear });
            } catch (error) {
                return console.log(error);
            }
            $("li:has(#new-summer)").hide();
            let view = $("#courses-view>div:last-child").get(0);
            view.scrollTo(0, view.scrollHeight);
            addTermTables([{ year: latestYear, term: "s", subjects:[] }])
        });

        $("button.menu-item").click((event) => {
            let activeItem = event.currentTarget;
            if (!$(activeItem).hasClass("active")) {
                let index = $(activeItem).index();
                openCourse = courses[index];
                $(".side-panel").hide();
                $("button.menu-item.active").removeClass("active");
                $(activeItem).addClass("active");
                $(courseTitle).text(activeItem.title + " Curriculum");
            }
        });
    }
    
    $("#add-course").click(async (event) => {
        try {
            const newCourse = $("[aria-describedby='add-course']").val();
            const courseID = await addCourse(newCourse);
            if (courseID) {
                return location.reload();
            }
        } catch (error) {
            console.log(error);
        }
    });
</script>