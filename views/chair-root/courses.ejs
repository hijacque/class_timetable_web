<% const {courses, currentCourse} = data %>
<div class="bg-light task-view" id="courses-view">
    <div class="side-panel">
        <div class="panel-header mx-4">
            <div class="d-flex justify-content-between">
                <h4>Courses</h4>
                <div>
                    <a type="button"><i class="fas fa-sort-alpha-up-alt"></i></a>
                    <a type="button"><i class="fas fa-search ms-2"></i></a>
                </div>
            </div>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="New Program Course" aria-describedby="add-course">
                <a type="button" class="input-group-text" id="add-course">
                    <i class="fas fa-plus text-primary"></i>
                </a>
            </div>
        </div>
        <hr>
        <div class="mx-3 panel-body">
            <% if (courses.length> 0) { %>
                <ul class="list-group panel-menu">
                    <% for (const {id, title} of courses) { %>
                        <a type="button" class="list-group-item list-group-item-action menu-item"
                            <% if (currentCourse.id != id) { %>
                                href="/chair/courses/<%= title.split(' ').join("_") %>"
                            <% } %>
                            title="<%= title %>">
                            <p class="text-truncate m-0">
                                <%= title %>
                            </p>
                        </a>
                    <% } %>
                </ul>
            <% } else { %>
                <p class="text-muted text-center">No Courses</p>
            <% } %>
        </div>
    </div>
    <div class="bg-white px-5 pt-4">
        <% if (courses.length > 0 && currentCourse) { %>
            <div class="dropdown">
                <a class="btn btn-primary btn-lg btn-rounded btn-top dropdown-toggle" data-mdb-toggle="dropdown" 
                    title="Add semester" id="add-semester">
                    add semester
                </a>
                <ul class="dropdown-menu" aria-labelledby="add-semester">
                    <li><a class="dropdown-item" role="button" id="new-year">New Academic Year</a></li>
                    <li><a class="dropdown-item" role="button" id="new-summer">Summer Term</a></li>
                    <li><hr class="dropdown-divider" /></li>
                    <li><a class="dropdown-item text-danger" role="button">Cancel</a></li>
                </ul>
            </div>
            <h3 style="color: #8673b4;" id="curriculum-title">
                <%= currentCourse.title %> Curriculum
            </h3>
            <label for="curriculum-title">Total No. of Units: <span id="total-units">0</span></label>
            <hr>
        <% } else if (courses.length > 0) { %>
            <h4>No courses chosen yet..</h4>
        <% } else { %>
            <h4>No courses found</h4>
        <% } %>
    </div>
</div>

<script src="/lib/responsive-table.js"></script>
<script>
    const courses = $(".panel-menu > .menu-item").get();
    
    <% if (currentCourse) { %>
        function addTermTables(tables = []) {
            const tableContent = 
                `<thead><th table-cts-column="code text" style="width: 150px;">COURSE CODE</th>` +
                `<th table-cts-column="title text">COURSE TITLE</th>` +
                `<th table-cts-column="units" style="width: 100px;">UNITS</th>` +
                `<td table-cts-column="edit">Action</td></thead>` +
                `<tbody></tbody>` +
                `<tfoot><tr class="add-data">` +
                    `<td><input type="text" class="form-control add-td-input optional reuse"></td>` +
                    `<td><input type="text" class="form-control add-td-input optional reuse"></td>` +
                    `<td><label class="add-td-input optional"></label></td>` +
                `</tr></tfoot>`;
            
            let view = $("#courses-view>div:last-child");
            for (let i = 0; i < tables.length; i++) {
                const term = tables[i];
                const newTable = `<div class="semester-header"><h6>${toOrdinal(term.year)} Year, ` +
                    `${(term.term == "s") ? "Summer" : toOrdinal(term.term) + " Semester"}</h6><div>` +
                    `<a class="btn btn-primary btn-floating" data-cts-toggle="table" ` +
                    `data-cts-target="#${term.year}-${term.term}-term"><i class="fas fa-edit fa-lg me-2"></i></a>` +
                    `<a class="btn btn-success btn-floating" data-cts-dismiss="table" ` +
                    `data-cts-target="#${term.year}-${term.term}-term"><i class="fas fa-check-double fa-lg me-2"></i></a>` +
                    `</div></div>` +
                    `<table class="table table-bordered table-sm mb-5" id="${term.year}-${term.term}-term">${tableContent}</table>`;
                view.append(newTable);

                const newSemTable = new EditableTable(`#${term.year}-${term.term}-term`);
                newSemTable.initData(term.subjects, false, () => newSemTable.addBtn.click(async (event) => {
                    const lastRow = $(`${newSemTable.body}>tr:last-child`);
                    const newRow = await $(event.currentTarget).data("newRow");
                    newRow.year = term.year;
                    newRow.semester = term.term;

                    if (!newRow.code && !newRow.title) {
                        lastRow.remove();
                        newSemTable.data.pop();
                        return alertModal.show(
                            0, "No subject code nor title",
                            "Cannot add subject into curriculum without code and title to base search on."
                        );
                    }
                        
                    try {
                        const newSubject = await addCourseSubject("<%= currentCourse.id %>", newRow);
                        const [rCode, rTitle, rUnits] = lastRow.children().get();
                        rCode.textContent = newSubject.code;
                        rTitle.textContent = newSubject.title;
                        rUnits.textContent = newSubject.units;
                    } catch (error) {
                        const eResponse = error.responseJSON;
                        if (eResponse) {
                            if (eResponse.redirect) {
                                location.replace(eResponse.redirect);
                            }
                            if (eResponse.message) {
                                alertModal.show(...Object.values(eResponse.message));
                            }
                        } else {
                            alertModal.show(0, "Server error", "Unexpected error occured, please try again later.");
                        }

                        $(`${newSemTable.body}>tr:last-child`).remove();
                        newSemTable.data.pop();
                    }
                }));
                semesterTables.push(newSemTable);
            }

            const totalTerms = tables.length;
            if (totalTerms > 0) {
                latestYear = tables[totalTerms-1].year;
                latestTerm = tables[totalTerms-1].term;
            }
        }

        async function initCourseCurriculum(data) {
            data = await data;
            console.log(data);
            $("#total-units").text(data.totalUnits || 0);
            addTermTables(data.curriculum);
            if (latestSem == "s") {
                $("li:has('#new-summer')").hide();
            }
        }

        function toOrdinal(number) {
            if (number == 1) {
                return number + "<sup>st</sup>";
            } else if (number == 2) {
                return number + "<sup>nd</sup>";
            } else if (number == 3) {
                return number + "<sup>rd</sup>";
            } else if (number > 3) {
                return number + "<sup>th</sup>";
            } else {
                return number;
            }
        }
        const totalTermsPerYear = <%- JSON.stringify(data.totalTerms || 0) %>;
        const semesterTables = [];
        let latestTerm, latestSem, latestYear = 0;
        let openCourse;
        if (courses.length > 0) {
            openCourse = courses.find(co => co.title == "<%= currentCourse.title %>");
            $(openCourse).addClass("active");
            initCourseCurriculum(getCurriculum("<%= currentCourse.id %>"), true);
            
            $("#new-year").click(async () => {
                try {
                    const {message} = await addSemester(
                        "<%= currentCourse.id %>", 
                        { forNewYear: 1, totalTerms: totalTermsPerYear }
                    );
                    alertModal.show(
                        ...Object.values(message || {mode: 3, title:"Something happened", body:"IDK what"})
                    );
                    latestYear++;
                } catch (error) {
                    return console.log(error);
                }
                $("li:has(#new-summer)").show();
                let view = $("#courses-view>div:last-child").get(0);
                view.scrollTo(0, view.scrollHeight);
                let newTerms = [];
                for (let i = 1; i <= totalTermsPerYear; i++) {
                    newTerms.push({ year: latestYear, term: i, subjects: [] });
                }
                addTermTables(newTerms);
            });
            $("#new-summer").click(async () => {
                try {
                    const {message} = await addSemester(
                        "<%= currentCourse.id %>", 
                        { forNewYear: 0, totalTerms: totalTermsPerYear }
                    );
                    alertModal.show(
                        ...Object.values(message || {mode: 3, title:"Something happened", body:"IDK what"})
                    );
                } catch (error) {
                    const {redirect, message} = error;
                    if (redirect) {
                        location.replace(redirect);
                    }
                    alertModal(...Object.values(message));
                }
                $("li:has(#new-summer)").hide();
                let view = $("#courses-view>div:last-child").get(0);
                view.scrollTo(0, view.scrollHeight);
                addTermTables([{ year: latestYear, term: "s", subjects:[] }])
            });
        }
    <% } %>
    
    $("#add-course").click(async (event) => {
        try {
            const newCourse = $("[aria-describedby='add-course']").val();
            const courseID = await addCourse(newCourse);
            if (courseID) {
                return location.reload();
            }
        } catch (error) {
            console.log(error);
        }
    });
</script>