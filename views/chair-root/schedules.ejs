<% let {terms, currentTerm, semesters } = data %>
<div class="bg-light task-view" id="schedules-view">
    <div class="side-panel">
        <div class="panel-header mx-4">
            <div class="d-flex justify-content-between">
                <h4>Schedules</h4>
                <div>
                    <a type="button"><i class="fas fa-sort-alpha-up-alt"></i></a>
                    <a type="button"><i class="fas fa-search ms-2"></i></a>
                </div>
            </div>
            <div class="input-group mb-3">
                <input
                  type="number"
                  class="form-control"
                  placeholder="Year"
                  aria-label="Year"
                  aria-describedby="new-term-year"
                  id="new-term-year"
                />
                <div class="dropdown">
                    <a class="text-primary dropdown-toggle input-group-text rounded-0" type="button"
                        data-mdb-toggle="dropdown" aria-expanded="false" id="new-term-sem">Semester</a>
                    <ul class="dropdown-menu">
                        <%- semesters.map(s => `<li><a class="dropdown-item" role="button">${s} Semester</a></li>`).join("") %>
                        <li><a class="dropdown-item" role="button">Summer</a></li>
                        <li><hr class="dropdown-divider m-0"></li>
                        <li><a class="dropdown-item text-danger" role="button">Cancel</a></li>
                    </ul>
                </div>
                <a type="button" class="input-group-text" id="add-term">
                    <i class="fas fa-plus text-primary"></i>
                </a>
            </div>
        </div>
        <div class="panel-body pb-2 px-3">
            <hr>
            <% if (terms.length > 0) { %>
                <ul class="list-group panel-menu">
                    <% for (const term of terms) { %>
                        <a type="button" class="list-group-item list-group-item-action menu-item"
                            <% if (term.id != currentTerm.id) { %>
                                href="/chair/schedules/<%= term.year %><%= term.term %>"
                            <% } %>
                            title="<%= term.year %><%= term.term %>">
                            <p class="text-truncate m-0">
                                <%- term.term_ordinal %> Semester, <%= term.year %>-<%= term.year + 1 %>
                            </p>
                        </a>
                    <% } %>
                </ul>
            <% } else { %>
                No Academic Terms
            <% } %>
        </div>
    </div>
    <div class="shadow-3 bg-white px-5 pt-4">
        <% if (terms.length > 0 && currentTerm) { %>
            <% const {year, term, term_ordinal} = currentTerm %>
            <% if (!currentTerm.isPosted) { %>
                <% if (!currentTerm.isSaved) { %>
                    <form method="post" action="/schedule/generate">
                        <button name="term" type="submit" title="Autogenerate Schedule" id="generate-sched"
                            class="btn btn-primary btn-lg btn-rounded btn-top" value="<%= year + term %>">
                            generate schedule<i class="fas fa-star fa-lg ms-3"></i>
                        </button>
                    </form>
                <% } %>
                <div class="d-flex">
                    <h3 id="term-title"><%- term_ordinal %> Semester, <%= year %>-<%= year+1 %></h3>
                    <form method="post" target="export_schedule" action="/schedule/download/<%= year + term %>/department"
                        onsubmit="window.open('_blank','export_schedule');">
                        <button type="submit" class="ms-4 btn btn-rounded btn-secondary" title="Export schedules">
                            <i class="fas fa-cloud-arrow-down fa-lg me-2"></i>export
                        </button>
                    </form>
                    <% if (!currentTerm.isSaved) { %>
                        <div>
                            <button class="ms-2 btn btn-danger btn-rounded" id="clear-schedule" title="Clear schedules">
                                <i class="fas fa-arrow-rotate-left fa-lg me-2"></i>reset all
                            </button>
                        </div>
                    <% } %>
                </div>
                <label for="term-title">Status: <span id="term-status" class="text-success">OPEN</span></label>
                <hr>
            <% } else { %>
                <div class="d-flex">
                    <h3 id="term-title"><%- term_ordinal %> Semester, <%= year %>-<%= year+1 %></h3>
                    <form method="post" target="export_schedule" action="/schedule/download/<%= year + term %>/department"
                        onsubmit="window.open('_blank','export_schedule');">
                        <button type="submit" class="ms-4 btn btn-rounded btn-secondary" title="Export schedules">
                            <i class="fas fa-cloud-arrow-down fa-lg me-2"></i>export
                        </button>
                    </form>
                    <form action="/schedule/unpost/<%= year + term %>" method="post">
                        <button type="submit" class="ms-2 btn btn-warning btn-rounded" id="unpost-schedules"
                            title="unpost schedules">
                            <i class="fas fa-times fa-lg me-2"></i>unpost
                        </button>
                    </form>
                </div>
                <label for="term-title">Status: <span id="term-status" class="text-primary">POSTED</span></label>
                <hr>
            <% } %>
            <% const {prev, current, next} = data %>
            <nav aria-label="Schedule Navigation for Department">
                <ul class="dropdown-menu" id="schedule-nav">
                    <% if (prev) { %>
                        <li class="page-item">
                            <a class="page-link me-2" type="button"
                                href="/chair/schedules/<%= year + term %><%= (prev.id != 'faculty') ? '?course=' + prev.id : '' %>">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                            <p class="prev page-label"><%= prev.title %></p>
                        </li>
                    <% } else { %>
                        <li class="page-item disabled"></li>
                    <% } %>

                    <li class="page-title"><%= current.title %></li>

                    <% if (next) { %>
                        <li class="justify-content-end page-item">
                            <p class="next page-label"><%= next.title %></p>
                            <a class="page-link ms-2" type="button"
                                href="/chair/schedules/<%= year + term %><%= next.id != 'faculty' ? '?course=' + next.id : '' %>">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    <% } else { %>
                        <li class="justify-content-end page-item disabled"></li>
                    <% } %>
                </ul>
            </nav>
            <table class="table table-bordered table-sm my-4"></table>
        <% } else if (terms.length > 0) { %>
            <h3>No chosen term yet...</h3>
        <% } else { %>
            <h3>Woops! No terms found yet, create new schedule now.</h3>
        <% } %>
    </div>
</div>

<script src="/lib/responsive-table.js"></script>
<script src="/lib/display-dropdown.js"></script>
<script>
    <% if (currentTerm) { %>
    
    function initScheduleTable(table) {
        const {id} = table;
        const termID = "<%= currentTerm.id %>";

        if (id == "faculty") {
            scheduleTable.attr("id", "faculty-schedule").append(
                `<thead clas='text-center'><tr>` +
                    `<%- !currentTerm.isPosted ? '<th table-cts-column="sched_status_checkbox" style="width: 120px;">Save<br>Schedule</th>' : '' %>` +
                    `<th table-cts-column="pref_status" style="width: 130px;">Preference Status</th>` +
                    `<th table-cts-column="name">Name</th>` +
                    `<th table-cts-column="faculty_status" style="width: 130px;">Employment Status</th>` +
                    `<th table-cts-column="teach_load number" style="width: 110px;">Assigned Load</th>` +
                `</tr></thead><tbody></tbody>`
            );
            const facultyTable = new DisplayTable("#faculty-schedule");
            facultyTable.initData(getSchedules(termID, id), true, () => {
                const rows = $(`${facultyTable.body}>tr`);
                rows.find("td:contains('saved'), td:contains('submitted')").addClass("text-success");
                rows.find("td:contains('unanswered')").addClass("text-warning");

                // for when schedules are posted
                if ("<%= currentTerm.isPosted %>" == "true") {
                    return;
                }

                rows.find("td:not(:first-child)").click(
                    (event) => openSchedule(id, event, facultyTable.data[$(event.currentTarget).closest("tr").index()].id)
                );
                rows.find("td:first-child >input[type=checkbox]").click(async (event) => {
                    let row = $(event.currentTarget).closest("tr");
                    if (event.currentTarget.checked) {
                        const data = await saveSchedule(facultyTable.data[row.index()].id).catch((error) => {
                            event.currentTarget.checked = false;
                            if (!error) {
                                alertModal.show(0, "Server Error", "We will get back to you later.");
                            } else if (error.message) {
                                alertModal.show(...Object.values(error.message));
                            }
                        });
                        console.log(data);
                        row.find("td:nth-child(2)").text(data.status);
                        row.find("td").removeClass("text-warning text-success");
                        row.find("td:contains('submitted')").addClass("text-success");
                        row.find("td:contains('unanswered')").addClass("text-warning");
                        facultyTable.data[row.index()].sched_status = 'saved';
                    } else {
                        const data = await unsaveSchedule(facultyTable.data[row.index()].id).catch(() => {
                            event.currentTarget.checked = true;
                        });
                        console.log(data);
                        row.find("td:nth-child(2)").text(data.status);
                        row.find("td").removeClass("text-warning text-success");
                        row.find("td:contains('submitted')").addClass("text-success");
                        row.find("td:contains('unanswered')").addClass("text-warning");
                        facultyTable.data[row.index()].sched_status = 'open';
                    }
                });
            });
        } else {
            scheduleTable.attr("id", "blocks-schedule").append(
                `<thead clas='text-center'><tr><th table-cts-column="year" style="width: 120px;">Year</th>` +
                `<th table-cts-column="block_no" style="width: 120px;">Block</th>` +
                `<th table-cts-column="total_students number" style="width: 160px;">No. of Students</th>` +
                `<th table-cts-column="sched_status" style="width: 120px;">Schedule<br>Status</th>` +
                `<th table-cts-column="${$("#generate-sched").get().length > 0 ? "edit delete" : ""}">Action</th></tr><tr class='add-data'>` +
                    `<td><input type="number" class="form-control add-td-input reuse text-center"></td>` +
                    `<td><label class="add-td-input optional"></label></td>` +
                    `<td><input type="number" class="form-control add-td-input optional text-center" min="1" max="100"></td>` +
                    `<td><label class="add-td-input optional"></label></td>` +
                `</tr></thead><tbody></tbody>`
            );

            const blocksTable = new EditableTable("#blocks-schedule");
            blocksTable.initData(getSchedules(termID, id), true, () => {
                $(blocksTable.addBtn).click(async (event) => {
                    let block;
                    try {
                        block = await $(event.currentTarget).data("newRow");
                    } catch (error) {
                        return console.log(error);
                    }

                    try {
                        const {newBlock} = await addBlock(
                            id, block.year, block.total_students, termID
                        );
                        console.log(newBlock);

                        let columns = $(`${blocksTable.body}>tr:last-child`)
                            .click((event) => openSchedule(id, event)).children("td").get();
                        
                        console.log(columns);
                        columns[1].textContent = newBlock;
                        columns[3].textContent = "incomplete";
                        $("#schedules-view>div:last-child").scrollTop()
                    } catch (eResponse) {
                        console.log(eResponse);
                        if (eResponse) {
                            if (eResponse.redirect) {
                                location.replace(eResponse.redirect);
                            }
                            if (eResponse.message) {
                                alertModal.show(...Object.values(eResponse.message));
                            }
                        } else {
                            alertModal.show(0, "Server error", "Unexpected error occured, please try again later.");
                        }
                        $(`${blocksTable.body}>tr:last-child`).remove();
                    }
                });
                $(`${blocksTable.body}>tr`)
                    .click((event) => openSchedule(id, event))
                    .on("row:confirm-change", removeBlock)
                    .find("td:contains('COMPLETE')").addClass("text-success");
            });
        }
    }

    const deleteBlock = (oldBlock) => new Promise((resolve, reject) => {
        $.post(
            "/api/delete_block/<%= currentTerm.id %>", oldBlock, () => location.reload()
        ).fail((error) => reject(error.responseJSON))
    });

    const saveSchedule = (facultyID) => new Promise((resolve, reject) => {
        $.post(
            "/api/save_schedule/<%= currentTerm.year + currentTerm.term %>", {facultyID: facultyID},
            (data) => resolve(data)
        ).fail((error) => reject(error.responseJSON))
    });

    const unsaveSchedule = (facultyID) => new Promise((resolve, reject) => {
        $.post(
            "/api/unsave_schedule/<%= currentTerm.year + currentTerm.term %>", {facultyID: facultyID},
            (data) => resolve(data)
        ).fail((error) => reject(error.responseJSON))
    });

    const removeBlock = async (event) => {
        if (event.currentTarget.isConnected) {
            return;
        }

        try {
            const [year, block_no] = $(event.currentTarget).children("td").get();
            await deleteBlock({year: year.textContent, block: block_no.textContent});
        } catch (error) {
            if (error) {
                if (error.redirect) {
                    location.replace(error.redirect);
                }
                if (error.message) {
                    alertModal.show(...Object.values(error.message));
                }
                console.log(error);
            } else {
                alertModal.show(0, "Server error", "Unexpected error occured, please try again later.");
            }
        }
        console.log("deleting block...");
    }

    const openSchedule = (tableID, rowEvent, schedID) => {
        const row = rowEvent.currentTarget;

        if (tableID == "faculty") {
            const index = $(row).index();
            window.location.href = `/schedule/faculty?term=${openTerm.title}&id=${schedID}`;
        } else if (!$(rowEvent.target).is("td.edit-action") && !$(rowEvent.target).closest("td").hasClass("edit-action")) {
            const [year, block] = row.children;
            window.location.href = `/schedule/${tableID}?term=${openTerm.title}&year=${year.textContent}&block=${block.textContent}`;
        }
    }

    const updateLoad = (rowEvent) => {
        if (rowEvent.currentTarget.isConnected) {
            const columns =  $(event.currentTarget).closest("td").siblings().get();
            $.post("/api/preferences/" + openTerm.attr("id"),
                { load: columns[2].textContent, facultyID: columns[0].textContent }
            ).fail((data) => console.log(data));
        }
    };

    /* 
    * main proces start here
    */
   let openTerm;
    const scheduleTable = $("#schedules-view>div:last-child>table"); // faculty or blocks schedule table of open term
    const termStatus = $("span#term-status");
    const currentTable = <%- JSON.stringify(data.current) %>;
    const terms = $(".menu-item").get();
    if (terms.length > 0) {
        openTerm = terms.find(t => t.title == "<%= currentTerm.year + currentTerm.term %>"); // current academic term opened
        $(openTerm).addClass("active");

        $("#open-terms").find(".menu-item").click((event) => termStatus.addClass("text-success").removeClass("text-muted"));

        $("#closed-terms").find(".menu-item").click((event) => termStatus.addClass("text-muted").removeClass("text-success"));

        initScheduleTable(currentTable);
    } else {
        $("#open-terms, #closed-terms").addClass("show");
    }
    <% } %>
    
    displayDropMenu($("#new-term-sem"), "Semester");
    $("#add-term").click(async (event) => {
        const semester = $("#new-term-sem").text();
        const year = $("#new-term-year").val();

        if (semester === "Semester" || !year) {
            return console.error("Missing new year or semester input.");
        } else if ($(".menu-item").is(`[title=${year + semester[0]}]`)) {
            return console.error("Academic term already exists.");
        }
        
        const newTermID = await addTerm(year, semester[0]);
        if (newTermID) {
            location.replace("/chair/schedules/" + year + semester[0]);
        }
    });

    $("#clear-schedule").click(() => {
        $("#accept-alert, #reject-alert, #confirm-alert").toggle();
        alertModal.show(
            2, "Are you sure?", 
            "By clicking yes, you will remove all classes assigned to faculty and blocks under your department."
        );
    });

    $("#accept-alert, #reject-alert").click(() => $("#accept-alert, #reject-alert, #confirm-alert").toggle());
</script>