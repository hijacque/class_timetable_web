<% const {colleges, currentCollege} = data %>
<div class="bg-light task-view" id="departments-view">
    <div class="side-panel">
        <div class="panel-header mx-4">
            <div class="d-flex justify-content-between">
                <h4>Colleges</h4>
                <div>
                    <a type="button"><i class="fas fa-sort-alpha-up-alt"></i></a>
                    <a type="button"><i class="fas fa-search ms-2"></i></a>
                </div>
            </div>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="New College" aria-describedby="add-college">
                <a type="button" class="input-group-text" id="add-college">
                    <i class="fas fa-plus text-primary"></i>
                </a>
            </div>
        </div>
        <hr>
        <div class="mx-3 panel-body">
            <% if (colleges.length> 0) { %>
                <ul class="list-group panel-menu">
                    <% for (const college of colleges) { %>
                        <a type="button" class="list-group-item list-group-item-action menu-item"
                            title="<%= college.name %>" 
                            <% if (college != currentCollege) { %>
                                href="/admin/departments/<%= college.name.split(' ').join('_') %>"
                            <% } %>
                            >
                            <p class="text-truncate m-0">
                                <%= college.name %>
                            </p>
                        </a>
                        <% } %>
                </ul>
                <% } else { %>
                    <p class="text-muted text-center">No Colleges</p>
                <% } %>
        </div>
    </div>
    <div class="shadow-3 bg-white px-5 pt-4">
        <% if (colleges.length > 0 && currentCollege) { %>
            <h2 style="color: #8673b4;" class="table-title">Departments in <%= currentCollege.name %></h2>
            <br>
            <div>
                <a class="btn btn-primary btn-rounded btn-top" data-cts-toggle="table" href="#add-dept"
                    type="button" data-cts-target="#departments-table">
                    <i class="fas fa-edit fa-lg me-2"></i>edit table
                </a>
                <a class="btn btn-success btn-rounded btn-top" data-cts-dismiss="table" data-cts-target="#departments-table"
                    aria-hidden="true"><i class="fas fa-check-double fa-lg me-2"></i>save table</a>
            </div>
            <table class="table table-bordered table-sm fw-bold my-4" id="departments-table">
                <thead class="text-center">
                    <tr>
                        <th table-cts-column="department text" style="width: 300px;">Department</th>
                        <th table-cts-column="chairperson" style="width: 400px;">Chairperson</th>
                        <th table-cts-column="activity">Recent Activity</th>
                        <td table-cts-column="edit delete">Action</td>
                    </tr>
                </thead>
                <tbody></tbody>
                <tfoot id="add-dept">
                    <tr class="add-data">
                        <td><input type="text" class="form-control add-td-input unique"></td>
                        <td><label class="add-td-input optional"></label></td>
                        <td><label class="add-td-input optional"></label></td>
                    </tr>
                </tfoot>
            </table>
        <% } else if (currentCollege) { %>
            <h4>No</h4>
        <% } %>
    </div>
</div>
<script src="/lib/responsive-table.js"></script>
<script>
    /*
    * main process starts here
    */
    const colleges = $(".panel-menu > .menu-item");
    <% if (currentCollege) { %>
    const departmentsTable = new EditableTable("#departments-table");
    if (colleges.length > 0) {
        let openCollege = $(".menu-item[title='<%= currentCollege.name %>']");
        $(openCollege).addClass("active");

        // initialize responsive Departments table
        departmentsTable.initData(getDepartments("<%= currentCollege.id %>"), true, 
            () => {
                $(`${departmentsTable.body}>tr`)
                .on("row:edit", initDeptEdit)
                .on("row:confirm-change", confirmDeptEdit)
                .on("row:cancel-change", cancelDeptEdit)
                .find("td:nth-child(2):contains('To be assigned...')").addClass("text-muted");
            }
        );

        $(departmentsTable.addBtn).click(async (event) => {
            let newDeptData;
            try {
                newDeptData = await $(event.currentTarget).data("newRow");
            } catch (error) {
                return console.error(error);
            }

            try {
                const message = await addDepartment("<%= currentCollege.id %>", newDeptData);
                $(`${departmentsTable.body}>tr:last-child>td:nth-child(2)`)
                    .text("To be assigned...")
                    .addClass("text-muted");
                
                if (message) {
                    alertModal.show(...Object.values(message));
                }
            } catch (eResponse) {
                if (eResponse) {
                    if (eResponse.redirect) {
                    location.replace(eResponse.redirect);
                    }
                    if (eResponse.message) {
                        alertModal.show(...Object.values(eResponse.message));
                    }
                } else {
                    alertModal.show(0, "Server error", "Unexpected error occured, please try again later.");
                }

                $(`${departmentsTable.body}>tr:last-child`).remove();
                departmentsTable.data.pop();
            }
            $(event.currentTarget).removeData("newRow");
        });
    }
    <% } %>
    
    $("#add-college").click(async (event) => {
        let collegeName = $(event.currentTarget).siblings("input:first").val();
        if (!collegeName || collegeName == "") {
            return alertModal.show(2, "Missing Input", "Enter a new college name.");
        }

        try {
            await addCollege(collegeName);
            location.replace("/admin/departments/" + collegeName.split(" ").join("_"));
        } catch (eResponse) {
            if (eResponse) {
                if (eResponse.redirect) {
                    location.replace(eResponse.redirect);
                }
                if (eResponse.message) {
                    alertModal.show(...Object.values(eResponse.message));
                }
            } else {
                alertModal.show(0, "Server error", "Unexpected error occured, please try again later.");
            }
        }
    });

    async function initDeptEdit(event) {
        // get current chairperson
        let chairColumn = $(event.currentTarget).children().get(1);
        let origItem = $(chairColumn).text();
        if (origItem == "" || origItem == "NULL") {
            return;
        }

        $(event.currentTarget).data("prevChair", origItem);
        let deptID = departmentsTable.data[$(event.currentTarget).index()]["id"];
        console.log(deptID);
        // get all faculty in the department
        let faculty = await getFaculty(deptID, ["faculty_id", "last_name", "first_name", "middle_name"]);
        console.log(faculty);
        if (faculty.length <= 1) {
            return;
        }

        // create dropdown list of faculty
        let dropMenu = "<ul class='dropdown-menu'>";
        for (const name of faculty) {
            let facultyName = `${name.last_name}, ${name.first_name} ${name.middle_name}`;
            dropMenu += `<li><a class="dropdown-item" role="button">${facultyName} (${name.faculty_id})</a></li>`;
        }
        dropMenu += "</ul>";
        $(chairColumn).empty().append(
            `<div class="dropdown">` +
            `<button class="btn btn-secondary dropdown-toggle td-input" type="button" ` +
            `id="chairperson" data-mdb-toggle="dropdown" aria-expanded="false" ` +
            `title="${origItem}">${origItem}</button>${dropMenu}` +
            `</div>`
        );
        departmentsTable.initMenuInputs(event.currentTarget);
    }

    async function confirmDeptEdit(event) {
        const action = $(event.currentTarget).data("edit-action");
        if (!action) {
            console.log($(event.currentTarget).data("deletedData"));
            console.log("Deleting from db...");
            return;
        }
        const [deptColumn, chairColumn] = $(event.currentTarget).children().get();
        let newChair = $(chairColumn).text();
        const deptID = departmentsTable.data[$(event.currentTarget).index()]["id"];
        let prevChair = $(event.currentTarget).data("prevChair");
        if (prevChair == "NULL" || prevChair == newChair) {
            return console.log("Chairperson unchanged.");
        }
        try {
            await updateDepartment(deptID, { deptName: deptColumn.value, chair: newChair });
            location.reload();
        } catch (eResponse) {
            if (eResponse) {
                if (eResponse.redirect) {
                    location.replace(eResponse.redirect);
                }
                if (eResponse.message) {
                    alertModal.show(...Object.values(eResponse.message));
                }
                console.log(eResponse);
            } else {
                alertModal.show(0, "Server error", "Unexpected error occured, please try again later.");
            }

            console.log(event.currentTarget);
            $(event.currentTarget).trigger("row:cancel-change");
        }
    }

    async function cancelDeptEdit(chairColumn) {
        if ($(chairColumn).data("edit-action") == 1) {
            let prevChair = $(chairColumn).data("prevChair");
            chairColumn.textContent = prevChair;
        }
    }
</script>