<div class="bg-light task-view" id="departments-view">
    <div class="side-panel">
        <div class="d-flex mx-4">
            <h4>Colleges<a type="button"><i class="fas fa-plus ms-2 fa-sm text-primary"></i></a></h4>
            <div>
                <a type="button"><i class="fas fa-sort-alpha-up-alt"></i></a>
                <a type="button"><i class="fas fa-search ms-2"></i></a>
            </div>
        </div>
        <hr>
        <div class="overflow-scroll mx-3">
            <ul class="list-group panel-menu">
                <% for (const college of data.colleges) { %>
                    <button type="button" class="list-group-item list-group-item-action menu-item"
                        title="<%= college.name %>" id="<%= college.id %>">
                        <p class="text-truncate m-0">
                            <%= college.name %>
                        </p>
                    </button>
                    <% } %>
            </ul>
        </div>
    </div>
    <div class="shadow-3 bg-white px-5 pt-4">
        <h2 style="color: #8673b4;" class="table-title">
            <%= data.colleges[0].name %>
        </h2>
        <br>
        <button class="btn btn-primary btn-rounded" data-cts-toggle="table" data-cts-target="#departments-table">
            <i class="fas fa-edit fa-lg me-2"></i>edit table</button>
        <button class="btn btn-success btn-rounded" data-cts-dismiss="table" data-cts-target="#departments-table"
            aria-hidden="true">save changes</button>
        <table class="table table-bordered table-sm fw-bold my-4 editable" id="departments-table">
            <thead class="text-center">
                <tr>
                    <th class="data-title">Department</th>
                    <th class="data-title">Chairperson</th>
                    <th class="data-title" style="width: 50%;">Recent Activity</th>
                    <td class="edit-title">Action</td>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot>
                <tr class="add-data">
                    <td>
                        <input id="department" type="text" class="form-control w-100 add-td-input unique"
                            title="Department">
                    </td>
                    <td class="constant" id="chairperson">
                        N/A
                    </td>
                    <td class="constant" id="activity">N/A</td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>
<script src="/lib/responsive-table.js"></script>
<script>
    const getDepartments = (collegeID) => {
        return new Promise((resolve, reject) => {
            $.get("http://localhost:3000/api/departments/" + collegeID,
                (data, status) => {
                    if (status == "success") {
                        resolve(data.departments);
                    } else {
                        reject(data);
                    }
                }, "json"
            );
        })
    };

    const getFaculty = (departmentID, columns) => {
        return new Promise((resolve, reject) => {
            $.get("http://localhost:3000/api/faculty/" + departmentID, { columns: columns},
                (data, status) => {
                    resolve(data.faculty);
                }, "json"
            ).fail((data) => reject(data));
        });
    }

    const addDepartment = (collegeID, deptData) => {
        $.post(
            "http://localhost:3000/api/departments/" + collegeID, deptData,
            (data, status) => {
                console.log(data);
            },
            "text json"
        );
    }

    const updateChair = (deptID, chairperson) => {
        $.post(
            "http://localhost:3000/api/chairperson/" + deptID, {chair: chairperson},
            (data, status) => {
                console.log(data);
            },
            "text json"
        );
    }

    const colleges = $(".panel-menu>button.menu-item");
    let openCollege = colleges.get(0);
    $(openCollege).addClass("active");
    let collegeTitle = $(".table-title");

    // initialize responsive Departments table
    const departmentsTable = new ResponsiveTable("#departments-table");
    departmentsTable.initData(getDepartments(openCollege.id), true, () => {
        // when editing a row, a dropdown list of faculty members from the department is shown
        // to choose the chairperson
        $(`${departmentsTable.body}>tr`).on("row:edit", async (event) => {
            let deptID = departmentsTable.data[$(event.currentTarget).index()]["id"];
            console.log(deptID);
            let faculty = await getFaculty(deptID, ["faculty_id", "last_name", "first_name", "middle_name"]);
            
            let chairColumn = $(event.currentTarget).children().get(1);
            let origItem = $(chairColumn).text();
            if (origItem == "NULL") {
                origItem = "chairperson";
            }

            let dropMenu = "<ul class='dropdown-menu'>";
            for (const name of faculty) {
                let facultyName = `${name.last_name}, ${name.first_name} ${name.middle_name}`;
                dropMenu += `<li><a class="dropdown-item" role="button">${facultyName} (${name.faculty_id})</a></li>`;
            }
            dropMenu += "</ul>";
            $(chairColumn).empty().append(
                `<div class="dropdown">` +
                    `<button class="btn btn-secondary dropdown-toggle td-input" type="button" ` +
                    `id="chairperson" data-mdb-toggle="dropdown" aria-expanded="false" ` +
                    `title="${origItem}">${origItem}</button>${dropMenu}` +
                `</div>`
            );
            departmentsTable.initMenuInputs(event.currentTarget);
        }).on("row:confirm-change", async (event) => {
            let chairColumn = $(event.currentTarget).children().get(1);
            let deptID = departmentsTable.data[$(event.currentTarget).index()]["id"];
            await updateChair(deptID, $(chairColumn).text());
        });
    });

    // retrieves departments from the open college
    $("button.menu-item").click((event) => {
        let activeItem = event.currentTarget;
        if (!$(activeItem).hasClass("active")) {
            openCollege = activeItem;
            $(".side-panel").hide();
            $("button.menu-item.active").removeClass("active");
            $(activeItem).addClass("active");
            departmentsTable.initData(getDepartments(activeItem.id), true);
            $(collegeTitle).text(activeItem.title);
        }
    });

    $(departmentsTable.addBtn).click(async (event) => {
        try {
            let addedData = await $(event.currentTarget).data("newRow");
            if (addedData) { addDepartment(openCollege.id, addedData); }
        } catch (error) {
            $(departmentsTable.table).find("tbody>tr:last-child").remove();
            departmentsTable.data.pop();
        }
        $(event.currentTarget).removeData("newRow");
    });
</script>